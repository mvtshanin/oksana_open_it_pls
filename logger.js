// Logger - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –Ω–∞ —Å–∞–π—Ç–µ

// ============================================
// –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM
// ============================================
const TELEGRAM_BOT_TOKEN = '8330558748:AAG4Gk2ANhrzf89VmrNbF3fai6eSwmw4pZk';
const TELEGRAM_CHAT_ID = '635452296';

// ============================================

class Logger {
    constructor() {
        this.sessionId = this.generateSessionId();
        this.startTime = new Date();
    }

    generateSessionId() {
        return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    getDeviceInfo() {
        return {
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            language: navigator.language,
            screenSize: `${screen.width}x${screen.height}`,
            isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
        };
    }

    async logEvent(eventType, eventData = {}) {
        const timestamp = new Date();
        const deviceInfo = this.getDeviceInfo();
        
        const logData = {
            eventType,
            timestamp: timestamp.toLocaleString('ru-RU'),
            sessionId: this.sessionId,
            timeOnSite: Math.round((timestamp - this.startTime) / 1000), // —Å–µ–∫—É–Ω–¥—ã
            device: deviceInfo,
            ...eventData
        };

        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log('üìä Event logged:', logData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        await this.sendTelegramNotification(logData);
    }

    async sendTelegramNotification(logData) {
        const message = this.formatTelegramMessage(logData);
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

        try {
            await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                })
            });
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        }
    }

    formatTelegramMessage(logData) {
        const emoji = logData.eventType === 'SITE_OPENED' ? 'üëÄ' : 
                     logData.eventType === 'BUTTON_CLICKED' ? 'üíï' : 'üìä';
        
        const eventName = logData.eventType === 'SITE_OPENED' ? '–°–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç!' : 
                         logData.eventType === 'BUTTON_CLICKED' ? '‚ù§Ô∏è –û–ù–ê –ü–†–ò–ù–Ø–õ–ê –ò–ó–í–ò–ù–ï–ù–ò–Ø! ‚ù§Ô∏è' : 
                         logData.eventType;

        const deviceType = logData.device.isMobile ? 'üì± –ú–æ–±–∏–ª—å–Ω–æ–µ' : 'üíª –î–µ—Å–∫—Ç–æ–ø';

        return `${emoji} <b>${eventName}</b>\n\n` +
               `üïí –í—Ä–µ–º—è: ${logData.timestamp}\n` +
               `‚è±Ô∏è –ù–∞ —Å–∞–π—Ç–µ: ${logData.timeOnSite} —Å–µ–∫\n` +
               `${deviceType} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n` +
               `üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${logData.device.platform}\n` +
               `üñ•Ô∏è –≠–∫—Ä–∞–Ω: ${logData.device.screenSize}\n` +
               `üåê –Ø–∑—ã–∫: ${logData.device.language}\n` +
               `üîë –°–µ—Å—Å–∏—è: ${logData.sessionId.substr(0, 20)}...`;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.Logger = Logger;

